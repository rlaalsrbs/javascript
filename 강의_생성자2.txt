함수
	- 행위 - 처리의 일련과정을 묶어 놓은 기능단위
	
	인수 - 처리할 영역에 들어갈 값
	function 함수명 (인수, 인수 ... ) {
		// 처리 영역 
		
		return 값; // 처리된 결과 값을 반환
	}
	
	function sum(x) {
		const result = x * 2 + 2
		
		return result;
	}
	
	
	함수를 사용하려면? - 호출
	함수명(); 
	
	만약 인수가 있다면?
	함수명(값);
	
	
	인수가 없는 함수가 가능한가?
	- 가능
	function 함수명() {
		
	}
	
	함수명();
	
	반환값이 없는 함수가 가능한가?
	- 가능
	- 내부적으로는 return이 없어도 undefined를 반환
		(return undefined;) 
		
	
	전역변수
		- 함수 외의 지역에서 정의되어 있는 변수
		- 함수 밖, 함수 안 모두 쓸 수 있는 변수
		
	지역변수
		- 함수 안에서 정의되어 있는 변수 
		- 함수 안에서만 쓸 수 있는 변수 
		- 함수가 호출 될때만 사용 가능 
		- 함수가 호출되는 동안에만 값이 유효하다
		- 함수가 스택영역 메모리에 올라가 있는 동안에만 유효 하다
		
		전역변수 명과 지역변수 명이 같으면 
		-> 지역에서는 전역변수를 사용하지 않고, 지역변수를 사용
		
		
		
메모리
	데이터 영역
	힙영역
	
	스택영역 - 함수가 호출되면 메모리에 실리는 영역
				  함수의 호출이 완료가 되면 함수가 메모리 영역에서 사라진다
	
	스택(Stack) - 쌓다
	큐(Queue) - 대기열 
	
	
자바스크립트에서 함수
	-> 함수 객체
	
	자바스크립트에서 함수는 1급 객체
		- 함수를 인수로 쓸 수 있다.
			예)
			function testFunc(innerFunc) {
				innerFunc();
			}

			const innerFunc = function() {
				console.log("인수를 함수로 쓰는 내부 함수");
			};
			
		- 함수를 반환 값으로 사용 할 수 있다.
			function testFunc() {
				return function innerFunc() {
					console.log("함수를 반환");
				};
			}
			
			const func = testFunc();
			func();
			
		-- 함수 안에 함수를 정의 할 수 있다
		-- 클로져
		
	
	모든 변수 -> 스택 메모리에 저장 된다
	
	
	
	
	function sum() {
	
	};
	
	const sum = function() {
	
	};
	
	익명함수 - 이름이 없는 함수
	
	
	생성자
	
	
	
	자바스크립트에서 함수 -> 함수 객체
	Function 객체를 통해서 생성된 객체 -> Heap 영역 
	
	
	즉시 실행 함수
	호출을 하는 별도 없이 바로 호출
	(function() {
		// 즉시 실행할 부분 
	})();
	
	(function(a, b) {
		// 실행 영역 
		
		// 반환 값 정의 가능
	})(2,3);
	
	const result = (function(a, b) {
		return a+b;
	})(2,3);