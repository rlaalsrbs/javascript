Array 
	배열 생성자
	
	const a = 1;
	const b = 2;
	
	
	값을 여러개 담을때 쓰는 객체
	
	값을 담기 위해서는 배열 객체를 생성해야 한다.
	
	1. new 연산자를 통해서 생성
		생성자 인수로 값을 여러개 할당
		const a = new Array(1,2,3,4,5);
		
		인수 1개 - 값으로 인식하는것이 아니라 배열의 공간 갯수로 인식 (유의점)
		(인수가 1개 -> 반드시 숫자(양수),  음수, 문자 -> 오류)
		const a = new Array(3); -> 빈 공간 3개 
		
	2. 대괄호 연산자[]를 통해서 생성
		const a = [1,2,3,4,5];
		

	3. 배열은 각 요소의 순서 번호가 자동으로 생성이 된다
	
	4. 순서 번호에 따라 접근을 하려면 대괄호 -- 배열변수[순서번호]
	
	5. 배열 객체
		["apple", "mango", "orange"]  
		
		객체 구성 
		{
			속성 : 값, // 원시타입 + 객체 --> 다 담을 수 있다 --> 배열은 객체 -> 배열도 다 담을 수 있다
			속성 : 값,
		}
		
		["apple", "mango", "orange"]  
		{
			"0" : "apple", 
			"1" : "mango",
			"2" : "orange",
		}
		
		접근 대괄호 [순서 번호 - 인덱스 번호]로 접근
		
		배열 데이터를 변경
		- 이미 있는 인덱스 번호의 값에 대입을 하면 변경
		
		a[1] = "변경할값";
		a[2] = "변경할값";
		
		배열 데이터를 추가
		없는 인덱스에 값을 대입하면 추가
		a[3] = "추가할 값";
		
			- 배열 생성자에서 제공되는 메서드
				
				.push() - 배열의 끝에 추가 --> 현재의 배열 갯수 반환 
				.unshift() - 배열의 앞에 추가 --> 현재의 배열 갯수를 반환 
		
		
		배열 데이터를 삭제
		delete 배열변수[인덱스번호];
			
				- 배열 생성자에서 제공되는 메서드
					.pop() - 배열의 마지막 요소를 삭제 -> 제거된 요소를 반환
					.shift() - 배열의 첫번째 요소를 삭제 -> 제거된 요소를 반환
		
		
		배열의 값은 - 모든 데이터(객체 이므로)
		
		
		배열 생성자 
			속성 
				.length - 배열의 요소의 갯수
				const a = ["apple", "orange", "mango"];
				for (let i = 0; i < a.length; i++) {
					console.log(a[i]);
				}
				
				length 속성에 값을 대입하면? 
					배열의 공간의 갯수가 변경이 된다
					
				
			메서드
				.concat - 여러 배열객체를 하나로 합칠때 사용 
				.includes(요소) - 요소가 포함이 되어 있는지 체크
				.indexOf("요소명")  - 요소가 위치하고 있는 배열의 인덱스를 반환
										 - 요소를 찾지 못하면 -1을 반환
										 - 찾는 방향이 왼쪽 -> 오른쪽
									
				.lastIndexOf("요소명") - indexOf와 동일 -> 다만 찾는 방향이 오른쪽 -> 왼쪽 
				
				.join("구분자") -- 구분자로 배열 요소를 결합하여 문자열로 반환
								   -- 구분자의 기본값 콤마(,) 
								   
								   String.split("구분자") -> 문자열을 구분자로 분해하여 배열 객체로 반환
								   
				.isArray() -> 배열 객체인지 아닌지를 구분할때 
								 배열변수 instanceof Array
								 
					참고)
						객체 변수 instanceof 객체 생성자
						--> 객체 변수가 객체 생성자로 부터 생성된 인스턴스 주소를 가지고 있는가?
						
						a instanceof Array --> Array 생성자로 생성된 객체인가?
						
				.keys() -> 배열의 전체 인덱스번호를 반환
				
				
				.pop() -> 가장 마지막 요소 제거, 제거된 요소를 반환
				.shift() -> 가장 처음 요소를 제거, 제거된 요소를 반환
				.splice() -> 배열의 중간 요소를 삭제(추가할 요소를 등록 하지 않으면)
				
				.push() -> 가장 마지막 요소에 추가, 추가 이후에 변경된 갯수를 반환
				.unshift() -> 가장 처음 요소에 추가, 추가 이후에 변경된 갯수를 반환
				.splice() --> 배열의 중간에 추가(삭제 갯수를 0으로 하면)
				
				.reverse() -> 배열의 순서를 반전
				
				.slice(시작, 종료) --> 시작 이상 종료 미만 만큼 배열 요소를 잘라서 반환
									  --> 종료가 없으면 시작부터 끝 
									  
									  --> 배열 객체를 복사
									  --> 반환값으로 배열은 새로 생성된 데이터(인스턴스)
									  
				.splice(시작, 삭제갯수, ...시작점부터 추가할 요소)
									- 삭제하고 시작점 부터 추가 
									- 배열의 중간에 값을 추가 할때 
									
				.sort() - 오름차순 정렬

				.forEach - 배열 객체를 순회 - 반환 X - 단순 순회
						.forEach(function(순회한 요소, 요소의 인덱스, forEach를 호출한 배열 객체의 주소 변수) {
						
						});
				.map 
						.map(function(순회한 요소, 요소의 인덱스, forEach를 호출한 배열 객체의 주소 변수) {
							// 배열 데이터 처리 
							return 반환값;
						});
						
						배열 데이터를 순회해서 변경한 새로운 배열 데이터를 반환
						
				.filter
						.filter(function(순회한 요소, 요소의 인덱스, forEach를 호출한 배열 객체의 주소 변수) {
							// 테스트 구간 
							- 테스트 성공시 return true; --> 순회한 요소가 반환
							- 테스트 실패시 return false; --> 건너뛴다
						});
						
			    .reduce
						.reduce(function(이전 연산 결과, 현재 요소 값) {
							
								return 이전 연산 결과 (연산자) 현재 요소값;
						});
				
					0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
					
					acc - 0, el - 1
					acc - 1(0+1), el - 2
					acc - 3(1+2), 3
					acc - 6(3+3), 4
					acc - 10(6+4), 5
					...
					
					합성 합