String 생성자
	-> 문자열을 처리하는 생성자
	-> 문자 'a'
	-> 문자열 'abcdefg' -> 문자 연속적으로 써 있는 형태(문장)

	const str = "abcdefghijk";
	str.charAt(1); // b 
	
	str는 원시타입 문자이고 객체 X -> 그러나 charAt 메서드 호출
	const str = "abcdefghijk";
	str.charAt() 호출하는 순간 
	내부적으로 new String(str);
	호출이 완료가 되면 다시 원래 원시타입으로 돌아간다
	
	래퍼 생성자 - 래핑
	
	프로그래밍에서 순서 -> 인덱스(0부터 시작)
	
	
	String
		.charAt(순서번호) -> 특정 순서에 있는 문자를 반환
		
		.concat(문자, 문자, 문자 ...) ->문자의 결합
		
		.endsWith(문자열) -> 문자열로 끝나는지 여부 -> 반환값이 true, false
		.startsWith(문자열) -> 문자열로 시작하는지 여부
		.includes(문자열) -> 문자열이 포함되어 있는지 여부 -> 반환값 true, false
		
		.indexOf(문자열) --> 문자열이 시작하는 위치 인덱스
							  --> 특정 문자열이 포함되어 있는지 체크
							  --> 문자열이 없는 경우 -1을 반환
							  --> 찾는 방향은 (왼쪽 -> 오른쪽)
							  
		.lastIndexOf("문자열") 
						--> indexOf와 동일 하지만 
						--> 문자열을 찾는 방향이 (오른쪽 -> 왼쪽)
						
		.repeat(숫자)
						--> 문자열을 숫자만큼 반복
		
		.replace(찾는 문자열,  변경할 문자열) 
						--> 문자열을 변경할 때
					    --> 가장 처음에 매칭이 되는 찾는 문자열만 변경
						--> 모두 치환 하기 위해서는 정규표현식이 필요
							예) /치환문자열/g
		
		.slice(시작, 종료) 
					--> 문자열을 잘라주는 역할
					--> 범위 시작 이상 종료 미만
						slice(1,5) ->  1 <= 문자열 < 5, 1,2,3,4
				    --> 종료 숫자를 입력 하지 않으면 시작 점 부터 끝까지
		
		.split("구분자") 
					--> 문자열을 구분자로 쪼개서 -> 배열 객체
					--> 반대되는 개념 Array.join(구분자) -> 배열객체를 구문자로 결합
		
		.substring(시작, 종료)
					--> slice 메서드와 비슷
					--> 범위는 시작 이상 종료 미만]
					--> 종료 숫자를 입력하지 않으면 시작점 부터 끝까지
					
		.toLowerCase() 
					--> 대문자를 소문자로
		
		.toUpperCase()
					--> 소문자를 대문자로
					
		.toString() 
			- String 생성자 인수로 넘겨준 문자열을 문자 원시타입으로 반환, 출력
			
		.trim() 
			- 문자열의 좌, 우 공백을 제거하는 역할
			
	
	문자열 - 문장(문자 여러개로 구성이 되어 있다)
	
	인덱스 번호로 접근
	배열은 [인덱스] 접근
	
	String 생성자는 함수 String() 사용이 가능 
	 -> 숫자 -> 문자